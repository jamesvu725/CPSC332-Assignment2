
Token: Identifier 	Lexeme: sum
<Statement> -> <Assignment Statement> | <Declarative Statement> | if <Conditional> then <Statement> else <Statement> endif | if <Conditional> then <Statement> endif | begin <Statement> <MoreStatements> end | while <Conditional> do <Statement> whileend
<Assignment Statement> -> <Identifier> = <Expression>;

Token: Operator 	Lexeme: =

Token: Separator 	Lexeme: (
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Identifier 	Lexeme: num1
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Operator 	Lexeme: *
<TermPrime> -> * <Term> | / <Term> | Epsilon

Token: Identifier 	Lexeme: num2
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Separator 	Lexeme: )

Token: Operator 	Lexeme: +
<ExpressionPrime> -> + <Expression> | - <Expression> | Epsilon

Token: Identifier 	Lexeme: num3
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Operator 	Lexeme: -
<ExpressionPrime> -> + <Expression> | - <Expression> | Epsilon

Token: Identifier 	Lexeme: num4
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Operator 	Lexeme: /
<TermPrime> -> * <Term> | / <Term> | Epsilon

Token: Identifier 	Lexeme: num5
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Separator 	Lexeme: ;
Syntax is correct.

