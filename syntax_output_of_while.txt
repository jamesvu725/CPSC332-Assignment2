
Token: Keyword 	Lexeme: while

Token: Identifier 	Lexeme: num1
<Conditional> -> <Expression> <RelationalOperator> <Expression> | <Expression>
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Operator 	Lexeme: >
<RelationalOperator> -> < | <= | == | <> | >= | >

Token: Identifier 	Lexeme: num2
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Keyword 	Lexeme: do

Token: Identifier 	Lexeme: num1
<Statement> -> <Assignment Statement> | <Declarative Statement> | if <Conditional> then <Statement> else <Statement> endif | if <Conditional> then <Statement> endif | begin <Statement> <MoreStatements> end | while <Conditional> do <Statement> whileend
<Assignment Statement> -> <Identifier> = <Expression>;

Token: Operator 	Lexeme: =

Token: Identifier 	Lexeme: num1
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Operator 	Lexeme: +
<ExpressionPrime> -> + <Expression> | - <Expression> | Epsilon

Token: Integer 	Lexeme: 1
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> ( <Expression> ) | <Identifier> | <Number>

Token: Separator 	Lexeme: ;

Token: Keyword 	Lexeme: whileend
Syntax is correct.

